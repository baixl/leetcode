/*
 * @lc app=leetcode.cn id=96 lang=cpp
 *
 * [96] 不同的二叉搜索树
 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
示例:
输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
	\       /     /      / \      \
	 3     2     1      1   3      2
	/     /       \                 \
   2     1         2                 3
 */
class Solution {
   public:
	/*

	 动态规划
	1、由i个不同的数组成的二叉搜索树个数，只与数的个数有关，和内容无关
	2、
	假设n个节点存在二叉排序树的个数是G(n)，令f(i)为以i为根的二叉搜索树的个数，则
	G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)
	f(i):表示以i为跟的二叉搜索树的个数
	3、
	当i(i从1开始到n)为根节点时，其左子树节点个数为i-1个，右子树节点为n-i，则
	f(i) = G(i-1)*G(n-i)    (左右子树个数的笛卡尔积)  i=1...n

	综合两个公式可得到：
	G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)

	G(0) =1: 空树
	G(1) =1: 单根节点

	 */
	int numTrees(int n) {
		if (n < 0) {
			return 0;
		}
		if (n <= 1) {
			return 1;
		}
		vector<int> dp(n + 1);  // dp[n+1]表示到数字n，所有的二叉搜索树个数
		dp[0] = 1;
		dp[1] = 1;
		for (auto i = 2; i <= n; i++) {
			for (auto j = 1; j <= i; j++) {
				dp[i] += dp[j - 1] * dp[i - j];
			}
		}

		return dp[n];
	}
};
